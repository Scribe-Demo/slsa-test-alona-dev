# name: Scribe GitHub App Workflow Demo
# on: 
#     push:
#     workflow_dispatch:

# env:
#      SCRIBE_URL: "https://api.dev.hub.scribesecurity.com/scribe-proxy"
#      SCRIBE_LOGIN_URL: "https://scribesec-dev.us.auth0.com"
#      SCRIBE_AUDIENCE: "api.dev.scribesecurity.com"

# jobs:
  
#   scribe-report-test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: create file and Docker
#         run: | 
#           echo `date` > tmp.txt
#           echo "FROM scratch" > Dockerfile
#           echo "COPY . ." >> Dockerfile
#           docker build -t date:latest .
 
#       - uses: actions/checkout@v3
      
#       - name: install opa
#         run: | 
#           curl -L -o opa https://openpolicyagent.org/downloads/v0.46.1/opa_linux_amd64_static
#           chmod +x ./opa
#           echo "installed"
#           whereis opa
#           ./opa version
      
      
#       - name: Clone GuillaumeFalourd/formulas-training PRIVATE repository
#         uses: GuillaumeFalourd/clone-github-repo-action@v2
#         with:
#             owner: 'scribe-security'
#             repository: 'GitHub-Posture'
#             access-token: ${{ secrets.GH_ACCESS_TOKEN }}
      
            
#       - name: Generate cyclonedx json SBOM
#         id: gensbom_json
#         uses: scribe-security/actions/gensbom/bom@master
#         with:
#           type: docker            
#           target: date:latest
#           format: json
#           verbose: 2
#           force: true
#           scribe-enable: true
#           product-key: ${{ secrets.SCRIBE_DEV_PRODUCT_KEY }}
#           scribe-client-id: ${{ secrets.SCRIBE_DEV_M2M_CLIENT_ID }}
#           scribe-client-secret: ${{ secrets.SCRIBE_DEV_M2M_CLIENT_SECRET }}
#           scribe-url: ${{ env.SCRIBE_URL }}
#           scribe-login-url: ${{ env.SCRIBE_LOGIN_URL }}
#           scribe-audience: ${{ env.SCRIBE_AUDIENCE }}

#       - name: Generate slsa prov statement
#         id: gensbom_slsa
#         uses: scribe-security/actions/gensbom/bom@master
#         with:
#           type: docker
#           target: 'date:latest'
#           format: statement-slsa
#           product-key: ${{ secrets.SCRIBE_DEV_PRODUCT_KEY }}
#           verbose: 2
#           force: true
          
#       - name: generate slsa report
#         run: | # echo "SLSA is great" > slsa.json
#           cat input.json | sed "s/GH_TOKEN/${{ secrets.GH_ACCESS_TOKEN }}/" | ./opa eval -I --format=pretty -b GitHub-Posture/github data.github.slsa.report > slsa.json
#           cat slsa.json

#       - uses: actions/upload-artifact@v2
#         with:
#           name: provenance
#           path: ${{ steps.gensbom_slsa.outputs.OUTPUT_PATH }}
          
#       - uses: actions/upload-artifact@v2
#         with:
#           name: slsa_report
#           path: slsa.json 
          
#       - name: Cache input.json
#         uses: actions/cache@v3
#         with:
#          path: ~/cache.txt
#          key: my-key
          
name: valint dev

on: 
    push:
    workflow_dispatch:
    
env:
     SCRIBE_URL: "https://api.dev.hub.scribesecurity.com/scribe-proxy"
     SCRIBE_LOGIN_URL: "https://scribesec-dev.us.auth0.com"
     SCRIBE_AUDIENCE: "api.dev.scribesecurity.com"

jobs:
  scribe-report-test:
    runs-on: ubuntu-latest
    steps:
  
      - name: create file and Docker
        run: | 
          echo `date` > tmp.txt
          echo "FROM scratch" > Dockerfile
          echo "COPY . ." >> Dockerfile
          docker build -t date:latest .

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/checkout@v3
        with:
          repository: mongo-express/mongo-express
          ref: refs/tags/v1.0.0-alpha.4
          path: mongo-express-scm

#       - name: Scm generate bom, upload to scribe
#         id: valint_bom_scm
#         uses: scribe-security/action-bom@master
#         with:
#            type: dir
#            target: 'mongo-express-scm'
#            scribe-enable: true
#            product-key: ${{ secrets.SCRIBE_DEV_PRODUCT_KEY }}
#            scribe-client-id: ${{ secrets.SCRIBE_DEV_M2M_CLIENT_ID }}
#            scribe-client-secret: ${{ secrets.SCRIBE_DEV_M2M_CLIENT_SECRET }}
#            scribe-url: ${{ env.SCRIBE_URL }}
#            scribe-login-url: ${{ env.SCRIBE_LOGIN_URL }}
#            scribe-audience: ${{ env.SCRIBE_AUDIENCE }}

      # Build and push your image - this example skips this step as we're using the published mongo express.

      - name: Image generate bom, upload to scribe
        id: valint_bom_image
        uses: scribe-security/action-bom@master
        with:
          type: docker # To be included only if you want to to use docker daemon to access the image (for example, creating your docker image locally)
          target: date:latest
          scribe-enable: true
          product-key: ${{ secrets.SCRIBE_DEV_PRODUCT_KEY }}
          scribe-client-id: ${{ secrets.SCRIBE_DEV_M2M_CLIENT_ID }}
          scribe-client-secret: ${{ secrets.SCRIBE_DEV_M2M_CLIENT_SECRET }}
          scribe-url: ${{ env.SCRIBE_URL }}
          scribe-login-url: ${{ env.SCRIBE_LOGIN_URL }}
          scribe-audience: ${{ env.SCRIBE_AUDIENCE }}

      - uses: actions/upload-artifact@v2
        with:
          name: scribe-reports
          path: |
            ${{ steps.valint_bom_scm.outputs.OUTPUT_PATH }}
            ${{ steps.valint_bom_image.outputs.OUTPUT_PATH }}
            
             - uses: actions/checkout@v2
              with:
              fetch-depth: 0

      - name: Generate SLSA provenance statement
        id: valint_slsa_statement
        uses: scribe-security/action-bom@master
        with:
          type: docker
          target: 'date:latest'
          format: statement-slsa
          product-key: ${{ secrets.SCRIBE_DEV_PRODUCT_KEY }}

      - uses: actions/upload-artifact@v2
        with:
           name: provenance
           path: ${{ steps.valint_slsa_statement.outputs.OUTPUT_PATH }}
       
